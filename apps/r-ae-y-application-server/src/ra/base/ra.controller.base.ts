/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RaService } from "../ra.service";
import { RaCreateInput } from "./RaCreateInput";
import { Ra } from "./Ra";
import { RaFindManyArgs } from "./RaFindManyArgs";
import { RaWhereUniqueInput } from "./RaWhereUniqueInput";
import { RaUpdateInput } from "./RaUpdateInput";

export class RaControllerBase {
  constructor(protected readonly service: RaService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Ra })
  async createRa(@common.Body() data: RaCreateInput): Promise<Ra> {
    return await this.service.createRa({
      data: data,
      select: {
        acknowledgedBy: true,
        createdAt: true,
        id: true,
        locationName: true,
        preparedBy: true,
        raDetails: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Ra] })
  @ApiNestedQuery(RaFindManyArgs)
  async ras(@common.Req() request: Request): Promise<Ra[]> {
    const args = plainToClass(RaFindManyArgs, request.query);
    return this.service.ras({
      ...args,
      select: {
        acknowledgedBy: true,
        createdAt: true,
        id: true,
        locationName: true,
        preparedBy: true,
        raDetails: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Ra })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async ra(@common.Param() params: RaWhereUniqueInput): Promise<Ra | null> {
    const result = await this.service.ra({
      where: params,
      select: {
        acknowledgedBy: true,
        createdAt: true,
        id: true,
        locationName: true,
        preparedBy: true,
        raDetails: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Ra })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRa(
    @common.Param() params: RaWhereUniqueInput,
    @common.Body() data: RaUpdateInput
  ): Promise<Ra | null> {
    try {
      return await this.service.updateRa({
        where: params,
        data: data,
        select: {
          acknowledgedBy: true,
          createdAt: true,
          id: true,
          locationName: true,
          preparedBy: true,
          raDetails: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Ra })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRa(
    @common.Param() params: RaWhereUniqueInput
  ): Promise<Ra | null> {
    try {
      return await this.service.deleteRa({
        where: params,
        select: {
          acknowledgedBy: true,
          createdAt: true,
          id: true,
          locationName: true,
          preparedBy: true,
          raDetails: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
