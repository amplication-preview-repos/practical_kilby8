/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Ra } from "./Ra";
import { RaCountArgs } from "./RaCountArgs";
import { RaFindManyArgs } from "./RaFindManyArgs";
import { RaFindUniqueArgs } from "./RaFindUniqueArgs";
import { CreateRaArgs } from "./CreateRaArgs";
import { UpdateRaArgs } from "./UpdateRaArgs";
import { DeleteRaArgs } from "./DeleteRaArgs";
import { RaService } from "../ra.service";
@graphql.Resolver(() => Ra)
export class RaResolverBase {
  constructor(protected readonly service: RaService) {}

  async _rasMeta(@graphql.Args() args: RaCountArgs): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Ra])
  async ras(@graphql.Args() args: RaFindManyArgs): Promise<Ra[]> {
    return this.service.ras(args);
  }

  @graphql.Query(() => Ra, { nullable: true })
  async ra(@graphql.Args() args: RaFindUniqueArgs): Promise<Ra | null> {
    const result = await this.service.ra(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Ra)
  async createRa(@graphql.Args() args: CreateRaArgs): Promise<Ra> {
    return await this.service.createRa({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Ra)
  async updateRa(@graphql.Args() args: UpdateRaArgs): Promise<Ra | null> {
    try {
      return await this.service.updateRa({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Ra)
  async deleteRa(@graphql.Args() args: DeleteRaArgs): Promise<Ra | null> {
    try {
      return await this.service.deleteRa(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
