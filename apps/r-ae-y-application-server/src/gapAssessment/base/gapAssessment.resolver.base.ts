/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { GapAssessment } from "./GapAssessment";
import { GapAssessmentCountArgs } from "./GapAssessmentCountArgs";
import { GapAssessmentFindManyArgs } from "./GapAssessmentFindManyArgs";
import { GapAssessmentFindUniqueArgs } from "./GapAssessmentFindUniqueArgs";
import { CreateGapAssessmentArgs } from "./CreateGapAssessmentArgs";
import { UpdateGapAssessmentArgs } from "./UpdateGapAssessmentArgs";
import { DeleteGapAssessmentArgs } from "./DeleteGapAssessmentArgs";
import { GapAssessmentService } from "../gapAssessment.service";
@graphql.Resolver(() => GapAssessment)
export class GapAssessmentResolverBase {
  constructor(protected readonly service: GapAssessmentService) {}

  async _gapAssessmentsMeta(
    @graphql.Args() args: GapAssessmentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [GapAssessment])
  async gapAssessments(
    @graphql.Args() args: GapAssessmentFindManyArgs
  ): Promise<GapAssessment[]> {
    return this.service.gapAssessments(args);
  }

  @graphql.Query(() => GapAssessment, { nullable: true })
  async gapAssessment(
    @graphql.Args() args: GapAssessmentFindUniqueArgs
  ): Promise<GapAssessment | null> {
    const result = await this.service.gapAssessment(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => GapAssessment)
  async createGapAssessment(
    @graphql.Args() args: CreateGapAssessmentArgs
  ): Promise<GapAssessment> {
    return await this.service.createGapAssessment({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => GapAssessment)
  async updateGapAssessment(
    @graphql.Args() args: UpdateGapAssessmentArgs
  ): Promise<GapAssessment | null> {
    try {
      return await this.service.updateGapAssessment({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GapAssessment)
  async deleteGapAssessment(
    @graphql.Args() args: DeleteGapAssessmentArgs
  ): Promise<GapAssessment | null> {
    try {
      return await this.service.deleteGapAssessment(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
