/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GapAssessmentService } from "../gapAssessment.service";
import { GapAssessmentCreateInput } from "./GapAssessmentCreateInput";
import { GapAssessment } from "./GapAssessment";
import { GapAssessmentFindManyArgs } from "./GapAssessmentFindManyArgs";
import { GapAssessmentWhereUniqueInput } from "./GapAssessmentWhereUniqueInput";
import { GapAssessmentUpdateInput } from "./GapAssessmentUpdateInput";

export class GapAssessmentControllerBase {
  constructor(protected readonly service: GapAssessmentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: GapAssessment })
  async createGapAssessment(
    @common.Body() data: GapAssessmentCreateInput
  ): Promise<GapAssessment> {
    return await this.service.createGapAssessment({
      data: data,
      select: {
        actionRequired: true,
        assessmentArea: true,
        createdAt: true,
        gapDescription: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [GapAssessment] })
  @ApiNestedQuery(GapAssessmentFindManyArgs)
  async gapAssessments(
    @common.Req() request: Request
  ): Promise<GapAssessment[]> {
    const args = plainToClass(GapAssessmentFindManyArgs, request.query);
    return this.service.gapAssessments({
      ...args,
      select: {
        actionRequired: true,
        assessmentArea: true,
        createdAt: true,
        gapDescription: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: GapAssessment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async gapAssessment(
    @common.Param() params: GapAssessmentWhereUniqueInput
  ): Promise<GapAssessment | null> {
    const result = await this.service.gapAssessment({
      where: params,
      select: {
        actionRequired: true,
        assessmentArea: true,
        createdAt: true,
        gapDescription: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: GapAssessment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateGapAssessment(
    @common.Param() params: GapAssessmentWhereUniqueInput,
    @common.Body() data: GapAssessmentUpdateInput
  ): Promise<GapAssessment | null> {
    try {
      return await this.service.updateGapAssessment({
        where: params,
        data: data,
        select: {
          actionRequired: true,
          assessmentArea: true,
          createdAt: true,
          gapDescription: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: GapAssessment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteGapAssessment(
    @common.Param() params: GapAssessmentWhereUniqueInput
  ): Promise<GapAssessment | null> {
    try {
      return await this.service.deleteGapAssessment({
        where: params,
        select: {
          actionRequired: true,
          assessmentArea: true,
          createdAt: true,
          gapDescription: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
